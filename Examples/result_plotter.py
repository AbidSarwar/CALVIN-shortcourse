#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Wed Sep  4 11:28:34 2024

@author: msdogan
"""

import matplotlib.pyplot as plt
import pandas as pd
import numpy as np
import os

fps = {
       'postprocess_full_size_model_94_years': 'CALVIN 94year',
       'postprocess_full_size_model_94_years_10percent_reduced_inflow': '10% Reduced Inflow'
       }

resultdir = 'plots'
if not os.path.isdir(resultdir):
  os.makedirs(resultdir)

fig = plt.figure(figsize=(5,4))
for fp in fps:
    data = pd.read_csv(fp + '/reservoir_storage.csv', index_col=0, parse_dates=True)
    total_sum = data.sum(axis=1)
    sort = np.sort(total_sum)[::-1]
    exceedence = np.arange(1.,len(sort)+1) / len(sort)
    plt.plot(exceedence*100, sort, label=fps[fp],alpha=0.6)
plt.xticks()
plt.yticks()
plt.legend()
plt.xlabel('Exceedence [%]')
plt.ylabel('Storage (TAF)')
plt.title('Total CALVIN Surface Storage',loc='left',fontweight='bold')
plt.tight_layout()
plt.savefig('plots/surface_storage_duration.png', transparent=False,dpi=300)
plt.close(fig)

fig = plt.figure(figsize=(5,4))
for fp in fps:
    data = pd.read_csv(fp + '/reservoir_storage.csv', index_col=0, parse_dates=True)
    total_sum = data.sum(axis=1)
    plt.plot(total_sum, label=fps[fp],alpha=0.6)
plt.xticks()
plt.yticks()
plt.legend()
plt.xlabel('Time')
plt.ylabel('Storage (TAF)')
plt.title('Total CALVIN Monthly Surface Storage',loc='left',fontweight='bold')
plt.tight_layout()
plt.savefig('plots/surface_storage.png', transparent=False,dpi=300)
plt.close(fig)

fig = plt.figure(figsize=(5,4))
for fp in fps:
    data = pd.read_csv(fp + '/reservoir_outflow.csv', index_col=0, parse_dates=True)
    total_sum = data.sum(axis=1)
    sort = np.sort(total_sum)[::-1]
    exceedence = np.arange(1.,len(sort)+1) / len(sort)
    plt.plot(exceedence*100, sort, label=fps[fp],alpha=0.6)
plt.xticks()
plt.yticks()
plt.legend()
plt.xlabel('Exceedence [%]')
plt.ylabel('Release (TAF/m)')
plt.title('Total CALVIN Reservoir Release',loc='left',fontweight='bold')
plt.tight_layout()
plt.savefig('plots/surface_reservoir_release_duration.png', transparent=False,dpi=300)
plt.close(fig)

fig = plt.figure(figsize=(5,4))
for fp in fps:
    data = pd.read_csv(fp + '/reservoir_outflow.csv', index_col=0, parse_dates=True)
    total_sum = data.sum(axis=1)
    plt.plot(total_sum, label=fps[fp],alpha=0.6)
plt.xticks()
plt.yticks()
plt.legend()
plt.xlabel('Time')
plt.ylabel('Release (TAF/m)')
plt.title('Total CALVIN Monthly Reservoir Release',loc='left',fontweight='bold')
plt.tight_layout()
plt.savefig('plots/surface_reservoir_release.png', transparent=False,dpi=300)
plt.close(fig)

fig = plt.figure(figsize=(5,4))
for fp in fps:
    data = pd.read_csv(fp + '/groundwater_pumping.csv', index_col=0, parse_dates=True)
    total_sum = data.sum(axis=1)
    sort = np.sort(total_sum)[::-1]
    exceedence = np.arange(1.,len(sort)+1) / len(sort)
    plt.plot(exceedence*100, sort, label=fps[fp],alpha=0.6)
plt.xticks()
plt.yticks()
plt.legend()
plt.xlabel('Exceedence [%]')
plt.ylabel('Pumping (TAF/m)')
plt.title('Total CALVIN Groundwater Pumping',loc='left',fontweight='bold')
plt.tight_layout()
plt.savefig('plots/groundwater_pumping_duration.png', transparent=False,dpi=300)
plt.close(fig)

fig = plt.figure(figsize=(5,4))
for fp in fps:
    data = pd.read_csv(fp + '/groundwater_pumping.csv', index_col=0, parse_dates=True)
    total_sum = data.sum(axis=1)
    plt.plot(total_sum, label=fps[fp],alpha=0.6)
plt.xticks()
plt.yticks()
plt.legend()
plt.xlabel('Time')
plt.ylabel('Pumpong (TAF/m)')
plt.title('Total CALVIN Monthly Groundwater Pumping',loc='left',fontweight='bold')
plt.tight_layout()
plt.savefig('plots/groundwater_pumping.png', transparent=False,dpi=300)
plt.close(fig)

fig = plt.figure(figsize=(5,4))
for fp in fps:
    data = pd.read_csv(fp + '/ag_delivery.csv', index_col=0, parse_dates=True)
    total_sum = data.sum(axis=1)
    sort = np.sort(total_sum)[::-1]
    exceedence = np.arange(1.,len(sort)+1) / len(sort)
    plt.plot(exceedence*100, sort, label=fps[fp],alpha=0.6)
plt.xticks()
plt.yticks()
plt.legend()
plt.xlabel('Exceedence [%]')
plt.ylabel('Delivery (TAF/m)')
plt.title('Total CALVIN Ag Delivery',loc='left',fontweight='bold')
plt.tight_layout()
plt.savefig('plots/ag_delivery_duration.png', transparent=False,dpi=300)
plt.close(fig)

fig = plt.figure(figsize=(5,4))
for fp in fps:
    data = pd.read_csv(fp + '/ag_delivery.csv', index_col=0, parse_dates=True)
    # total_sum = data['A104-HU104']
    total_sum = data.sum(axis=1)
    plt.plot(total_sum, label=fps[fp],alpha=0.6)
plt.xticks()
plt.yticks()
plt.legend()
plt.xlabel('Time')
plt.ylabel('Delivery (TAF/m)')
plt.title('Total CALVIN Ag Delivery',loc='left',fontweight='bold')
plt.tight_layout()
plt.savefig('plots/ag_delivery.png', transparent=False,dpi=300)
plt.close(fig)

fig = plt.figure(figsize=(5,4))
for fp in fps:
    data = pd.read_csv(fp + '/urban_delivery.csv', index_col=0, parse_dates=True)
    total_sum = data.sum(axis=1)
    sort = np.sort(total_sum)[::-1]
    exceedence = np.arange(1.,len(sort)+1) / len(sort)
    plt.plot(exceedence*100, sort, label=fps[fp],alpha=0.6)
plt.xticks()
plt.yticks()
plt.legend()
plt.xlabel('Exceedence [%]')
plt.ylabel('Delivery (TAF/m)')
plt.title('Total CALVIN Urban Delivery',loc='left',fontweight='bold')
plt.tight_layout()
plt.savefig('plots/urban_delivery_duration.png', transparent=False,dpi=300)
plt.close(fig)

fig = plt.figure(figsize=(5,4))
for fp in fps:
    data = pd.read_csv(fp + '/urban_delivery.csv', index_col=0, parse_dates=True)
    total_sum = data.sum(axis=1)
    plt.plot(total_sum, label=fps[fp],alpha=0.6)
plt.xticks()
plt.yticks()
plt.legend()
plt.xlabel('Time')
plt.ylabel('Delivery (TAF/m)')
plt.title('Total CALVIN Urban Delivery',loc='left',fontweight='bold')
plt.tight_layout()
plt.savefig('plots/urban_delivery.png', transparent=False,dpi=300)
plt.close(fig)

fig = plt.figure(figsize=(5,4))
for fp in fps:
    data = pd.read_csv(fp + '/ag_delivery_sw.csv', index_col=0, parse_dates=True)
    total_sum = data.sum(axis=1)
    sort = np.sort(total_sum)[::-1]
    exceedence = np.arange(1.,len(sort)+1) / len(sort)
    plt.plot(exceedence*100, sort, label=fps[fp],alpha=0.6)
plt.xticks()
plt.yticks()
plt.legend()
plt.xlabel('Exceedence [%]')
plt.ylabel('Delivery (TAF/m)')
plt.title('Total CALVIN Ag Delivery-Surface Water',loc='left',fontweight='bold')
plt.tight_layout()
plt.savefig('plots/ag_delivery_sw_duration.png', transparent=False,dpi=300)
plt.close(fig)

fig = plt.figure(figsize=(5,4))
for fp in fps:
    data = pd.read_csv(fp + '/ag_delivery_sw.csv', index_col=0, parse_dates=True)
    total_sum = data.sum(axis=1)
    plt.plot(total_sum, label=fps[fp],alpha=0.6)
plt.xticks()
plt.yticks()
plt.legend()
plt.xlabel('Time')
plt.ylabel('Delivery (TAF/m)')
plt.title('Total CALVIN Ag Delivery-Surface Water',loc='left',fontweight='bold')
plt.tight_layout()
plt.savefig('plots/ag_delivery_sw.png', transparent=False,dpi=300)
plt.close(fig)

fig = plt.figure(figsize=(5,4))
for fp in fps:
    data = pd.read_csv(fp + '/ag_delivery_gw.csv', index_col=0, parse_dates=True)
    total_sum = data.sum(axis=1)
    sort = np.sort(total_sum)[::-1]
    exceedence = np.arange(1.,len(sort)+1) / len(sort)
    plt.plot(exceedence*100, sort, label=fps[fp],alpha=0.6)
plt.xticks()
plt.yticks()
plt.legend()
plt.xlabel('Exceedence [%]')
plt.ylabel('Delivery (TAF/m)')
plt.title('Total CALVIN Ag Delivery-Groundwater',loc='left',fontweight='bold')
plt.tight_layout()
plt.savefig('plots/ag_delivery_gw_duration.png', transparent=False,dpi=300)
plt.close(fig)

fig = plt.figure(figsize=(5,4))
for fp in fps:
    data = pd.read_csv(fp + '/ag_delivery_gw.csv', index_col=0, parse_dates=True)
    total_sum = data.sum(axis=1)
    plt.plot(total_sum, label=fps[fp],alpha=0.6)
plt.xticks()
plt.yticks()
plt.legend()
plt.xlabel('Time')
plt.ylabel('Delivery (TAF/m)')
plt.title('Total CALVIN Ag Delivery-Groundwater',loc='left',fontweight='bold')
plt.tight_layout()
plt.savefig('plots/ag_delivery_gw.png', transparent=False,dpi=300)
plt.close(fig)

fig = plt.figure(figsize=(5,4))
for fp in fps:
    data = pd.read_csv(fp + '/ag_delivery_gw.csv', index_col=0, parse_dates=True)
    total_sum1 = data.sum(axis=1)#.resample('A').mean()
    data = pd.read_csv(fp + '/ag_delivery_sw.csv', index_col=0, parse_dates=True)
    total_sum2 = data.sum(axis=1)#.resample('A').mean()
    plt.plot(total_sum1/total_sum2, label=fps[fp],alpha=0.6)
plt.xticks()
plt.yticks()
plt.legend()
plt.xlabel('Time')
plt.ylabel('Delivery Ratio')
plt.title('Ag Delivery: Groundwater/Surface Water',loc='left',fontweight='bold')
plt.tight_layout()
plt.savefig('plots/ag_delivery_gw_sw_ratio.png', transparent=False,dpi=300)
plt.close(fig)

fig = plt.figure(figsize=(5,4))
for fp in fps:
    data = pd.read_csv(fp + '/urban_delivery_sw.csv', index_col=0, parse_dates=True)
    total_sum = data.sum(axis=1)
    sort = np.sort(total_sum)[::-1]
    exceedence = np.arange(1.,len(sort)+1) / len(sort)
    plt.plot(exceedence*100, sort, label=fps[fp],alpha=0.6)
plt.xticks()
plt.yticks()
plt.legend()
plt.xlabel('Exceedence [%]')
plt.ylabel('Delivery (TAF/m)')
plt.title('Total CALVIN Urban Delivery-Surface Water',loc='left',fontweight='bold')
plt.tight_layout()
plt.savefig('plots/urban_delivery_sw_duration.png', transparent=False,dpi=300)
plt.close(fig)

fig = plt.figure(figsize=(5,4))
for fp in fps:
    data = pd.read_csv(fp + '/urban_delivery_sw.csv', index_col=0, parse_dates=True)
    total_sum = data.sum(axis=1)
    plt.plot(total_sum, label=fps[fp],alpha=0.6)
plt.xticks()
plt.yticks()
plt.legend()
plt.xlabel('Time')
plt.ylabel('Delivery (TAF/m)')
plt.title('Total CALVIN Urban Delivery-Surface Water',loc='left',fontweight='bold')
plt.tight_layout()
plt.savefig('plots/urban_delivery_sw.png', transparent=False,dpi=300)
plt.close(fig)

fig = plt.figure(figsize=(5,4))
for fp in fps:
    data = pd.read_csv(fp + '/urban_delivery_rc.csv', index_col=0, parse_dates=True)
    total_sum = data.sum(axis=1)
    sort = np.sort(total_sum)[::-1]
    exceedence = np.arange(1.,len(sort)+1) / len(sort)
    plt.plot(exceedence*100, sort, label=fps[fp],alpha=0.6)
plt.xticks()
plt.yticks()
plt.legend()
plt.xlabel('Exceedence [%]')
plt.ylabel('Delivery (TAF/m)')
plt.title('Total CALVIN Urban Delivery-Recycled',loc='left',fontweight='bold')
plt.tight_layout()
plt.savefig('plots/urban_delivery_rc_duration.png', transparent=False,dpi=300)
plt.close(fig)

fig = plt.figure(figsize=(5,4))
for fp in fps:
    data = pd.read_csv(fp + '/urban_delivery_rc.csv', index_col=0, parse_dates=True)
    total_sum = data.sum(axis=1)
    plt.plot(total_sum, label=fps[fp],alpha=0.6)
plt.xticks()
plt.yticks()
plt.legend()
plt.xlabel('Time')
plt.ylabel('Delivery (TAF/m)')
plt.title('Total CALVIN Urban Delivery-Recycled',loc='left',fontweight='bold')
plt.tight_layout()
plt.savefig('plots/urban_delivery_rc.png', transparent=False,dpi=300)
plt.close(fig)

fig = plt.figure(figsize=(5,4))
for fp in fps:
    data = pd.read_csv(fp + '/urban_delivery_gw.csv', index_col=0, parse_dates=True)
    total_sum = data.sum(axis=1)
    sort = np.sort(total_sum)[::-1]
    exceedence = np.arange(1.,len(sort)+1) / len(sort)
    plt.plot(exceedence*100, sort, label=fps[fp],alpha=0.6)
plt.xticks()
plt.yticks()
plt.legend()
plt.xlabel('Exceedence [%]')
plt.ylabel('Delivery (TAF/m)')
plt.title('Total CALVIN Urban Delivery-Groundwater',loc='left',fontweight='bold')
plt.tight_layout()
plt.savefig('plots/urban_delivery_gw_duration.png', transparent=False,dpi=300)
plt.close(fig)

fig = plt.figure(figsize=(5,4))
for fp in fps:
    data = pd.read_csv(fp + '/urban_delivery_gw.csv', index_col=0, parse_dates=True)
    total_sum = data.sum(axis=1)
    plt.plot(total_sum, label=fps[fp],alpha=0.6)
plt.xticks()
plt.yticks()
plt.legend()
plt.xlabel('Time')
plt.ylabel('Delivery (TAF/m)')
plt.title('Total CALVIN Urban Delivery-Groundwater',loc='left',fontweight='bold')
plt.tight_layout()
plt.savefig('plots/urban_delivery_gw.png', transparent=False,dpi=300)
plt.close(fig)


fig = plt.figure(figsize=(5,4))
for fp in fps:
    data = pd.read_csv(fp + '/delta_exports.csv', index_col=0, parse_dates=True)
    total_sum = data.sum(axis=1)
    sort = np.sort(total_sum)[::-1]
    exceedence = np.arange(1.,len(sort)+1) / len(sort)
    plt.plot(exceedence*100, sort, label=fps[fp],alpha=0.6)
plt.xticks()
plt.yticks()
plt.legend()
plt.xlabel('Exceedence [%]')
plt.ylabel('Delivery (TAF/m)')
plt.title('Total CALVIN Delta Exports',loc='left',fontweight='bold')
plt.tight_layout()
plt.savefig('plots/delta_exports_duration.png', transparent=False,dpi=300)
plt.close(fig)

fig = plt.figure(figsize=(5,4))
for fp in fps:
    data = pd.read_csv(fp + '/delta_exports.csv', index_col=0, parse_dates=True)
    total_sum = data.sum(axis=1)
    plt.plot(total_sum, label=fps[fp],alpha=0.6)
plt.xticks()
plt.yticks()
plt.legend()
plt.xlabel('Time')
plt.ylabel('Delivery (TAF/m)')
plt.title('Total CALVIN Delta Exports',loc='left',fontweight='bold')
plt.tight_layout()
plt.savefig('plots/delta_exports.png', transparent=False,dpi=300)
plt.close(fig)

fig = plt.figure(figsize=(5,4))
for fp in fps:
    data = pd.read_csv(fp + '/surplus_delta_outflow.csv', index_col=0, parse_dates=True)
    total_sum = data.sum(axis=1)
    sort = np.sort(total_sum)[::-1]
    exceedence = np.arange(1.,len(sort)+1) / len(sort)
    plt.plot(exceedence*100, sort, label=fps[fp],alpha=0.6)
plt.xticks()
plt.yticks()
plt.legend()
plt.xlabel('Exceedence [%]')
plt.ylabel('Flow (TAF/m)')
plt.title('CALVIN Surplus Delta Outflow',loc='left',fontweight='bold')
plt.tight_layout()
plt.savefig('plots/surplus_delta_outflow_duration.png', transparent=False,dpi=300)
plt.close(fig)

fig = plt.figure(figsize=(5,4))
for fp in fps:
    data = pd.read_csv(fp + '/surplus_delta_outflow.csv', index_col=0, parse_dates=True)
    total_sum = data.sum(axis=1)
    plt.plot(total_sum, label=fps[fp],alpha=0.6)
plt.xticks()
plt.yticks()
plt.legend()
plt.xlabel('Time')
plt.ylabel('Flow (TAF/m)')
plt.title('CALVIN Surplus Delta Outflow',loc='left',fontweight='bold')
plt.tight_layout()
plt.savefig('plots/surplus_delta_outflow.png', transparent=False,dpi=300)
plt.close(fig)

fig = plt.figure(figsize=(5,4))
for fp in fps:
    data = pd.read_csv(fp + '/rim_inflow.csv', index_col=0, parse_dates=True)
    total_sum = data.sum(axis=1)
    sort = np.sort(total_sum)[::-1]
    exceedence = np.arange(1.,len(sort)+1) / len(sort)
    plt.plot(exceedence*100, sort, label=fps[fp],alpha=0.6)
plt.xticks()
plt.yticks()
plt.legend()
plt.xlabel('Exceedence [%]')
plt.ylabel('Inflow (TAF/m)')
plt.title('CALVIN RIM Inflow',loc='left',fontweight='bold')
plt.tight_layout()
plt.savefig('plots/rim_inflow_duration.png', transparent=False,dpi=300)
plt.close(fig)

fig = plt.figure(figsize=(5,4))
for fp in fps:
    data = pd.read_csv(fp + '/rim_inflow.csv', index_col=0, parse_dates=True)
    total_sum = data.sum(axis=1)
    plt.plot(total_sum, label=fps[fp],alpha=0.6)
plt.xticks()
plt.yticks()
plt.legend()
plt.xlabel('Time')
plt.ylabel('Inflow (TAF/m)')
plt.title('CALVIN RIM Inflow',loc='left',fontweight='bold')
plt.tight_layout()
plt.savefig('plots/rim_inflow.png', transparent=False,dpi=300)
plt.close(fig)

fig = plt.figure(figsize=(5,4))
for fp in fps:
    data = pd.read_csv(fp + '/gw_inflow.csv', index_col=0, parse_dates=True)
    total_sum = data.sum(axis=1)
    sort = np.sort(total_sum)[::-1]
    exceedence = np.arange(1.,len(sort)+1) / len(sort)
    plt.plot(exceedence*100, sort, label=fps[fp],alpha=0.6)
plt.xticks()
plt.yticks()
plt.legend()
plt.xlabel('Exceedence [%]')
plt.ylabel('Inflow (TAF/m)')
plt.title('CALVIN Groundwater Inflow',loc='left',fontweight='bold')
plt.tight_layout()
plt.savefig('plots/gw_inflow_duration.png', transparent=False,dpi=300)
plt.close(fig)

fig = plt.figure(figsize=(5,4))
for fp in fps:
    data = pd.read_csv(fp + '/gw_inflow.csv', index_col=0, parse_dates=True)
    total_sum = data.sum(axis=1)
    plt.plot(total_sum, label=fps[fp],alpha=0.6)
plt.xticks()
plt.yticks()
plt.legend()
plt.xlabel('Time')
plt.ylabel('Inflow (TAF/m)')
plt.title('CALVIN Groundwater Inflow',loc='left',fontweight='bold')
plt.tight_layout()
plt.savefig('plots/gw_inflow.png', transparent=False,dpi=300)
plt.close(fig)